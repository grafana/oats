package compose_test

import (
	"context"
	"net"
	"path"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"github.com/grafana/oats/internal/testhelpers/compose"
	"github.com/grafana/oats/internal/testhelpers/prometheus/responses"
	"github.com/grafana/oats/internal/testhelpers/requests"
)

var _ = Describe("provisioning a local observability endpoint with Docker", Ordered, Label("docker", "integration", "slow"), func() {
	var otelComposeEndpoint *compose.ComposeEndpoint

	BeforeAll(func() {
		var ctx context.Context = context.Background()
		var startErr error

		otelComposeEndpoint = compose.NewEndpoint(
			path.Join(".", "docker-compose-metrics.yml"),
			path.Join(".", "test-suite-metrics-otel.log"),
			[]string{},
			compose.PortsConfig{PrometheusHTTPPort: 9090},
		)
		startErr = otelComposeEndpoint.Start(ctx)
		Expect(startErr).ToNot(HaveOccurred(), "expected no error starting a local observability endpoint")
	})

	AfterAll(func() {
		var ctx context.Context = context.Background()
		var stopErr error

		if otelComposeEndpoint != nil {
			stopErr = otelComposeEndpoint.Stop(ctx)
			Expect(stopErr).ToNot(HaveOccurred(), "expected no error stopping the local observability endpoint")
		}
	})

	// Traces generated by auto-instrumentation
	Describe("observability.LocalEndpoint", func() {
		It("can create metrics with auto-instrumentation", func() {
			ctx := context.Background()
			const apiCount = 3

			// Run repeated /smoke APIs to ensure data is flowing from the application to Tempo
			Eventually(ctx, func(g Gomega) {
				err := requests.DoHTTPGet("http://localhost:8080/smoke", 200)
				g.Expect(err).ToNot(HaveOccurred())

				b, err := otelComposeEndpoint.RunPromQL(ctx, `http_server_duration_count{http_route="/smoke"}`)
				g.Expect(err).ToNot(HaveOccurred())
				g.Expect(len(b)).Should(BeNumerically(">", 0))

				pr, err := responses.ParseQueryOutput(b)
				g.Expect(err).ToNot(HaveOccurred())
				g.Expect(len(pr)).Should(BeNumerically(">", 0))
			}).WithTimeout(30*time.Second).Should(Succeed(), "calling /smoke for 30 seconds should cause metrics in Prometheus")

			for i := 0; i < apiCount; i++ {
				Expect(requests.DoHTTPGet("http://localhost:8080/greeting?delay=30ms&status=204", 204)).ShouldNot(HaveOccurred())
			}

			var pr []responses.Result

			Eventually(ctx, func(g Gomega) {
				b, err := otelComposeEndpoint.RunPromQL(ctx, `http_server_duration_count{`+
					`http_method="GET",`+
					`http_status_code="204",`+
					`service_namespace="integration-test",`+
					`service_name="testserver",`+
					`http_route="/greeting"}`)
				g.Expect(err).ToNot(HaveOccurred())
				g.Expect(len(b)).Should(BeNumerically(">", 0))

				pr, err = responses.ParseQueryOutput(b)
				g.Expect(err).ToNot(HaveOccurred())
				g.Expect(len(pr)).Should(BeNumerically(">", 0))
			}).WithTimeout(30*time.Second).Should(Succeed(), "metrics should appear in Prometheus with /greeting as http.target")

			Expect(responses.EnoughPromResults(pr)).ToNot(HaveOccurred())
			count, err := responses.TotalPromCount(pr)
			Expect(err).ToNot(HaveOccurred())
			Expect(count).Should(Equal(apiCount))

			res := pr[0]
			addr := net.ParseIP(res.Metric["net_sock_peer_addr"])
			Expect(addr).ToNot(BeNil())
		})
	})
})
